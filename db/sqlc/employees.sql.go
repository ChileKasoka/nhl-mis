// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: employees.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employees (
  first_name, last_name, email, phone_number, hire_date, position, salary
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING employee_id, first_name, last_name, email, phone_number, hire_date, position, salary, user_id
`

type CreateEmployeeParams struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	Email       string         `json:"email"`
	PhoneNumber sql.NullString `json:"phone_number"`
	HireDate    sql.NullTime   `json:"hire_date"`
	Position    sql.NullString `json:"position"`
	Salary      sql.NullString `json:"salary"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, createEmployee,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.HireDate,
		arg.Position,
		arg.Salary,
	)
	var i Employee
	err := row.Scan(
		&i.EmployeeID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.HireDate,
		&i.Position,
		&i.Salary,
		&i.UserID,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employees
WHERE employee_id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, employeeID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, employeeID)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT employee_id, first_name, last_name, email, phone_number, hire_date, position, salary, user_id FROM employees
WHERE employee_id = $1
LIMIT 1
`

func (q *Queries) GetEmployee(ctx context.Context, employeeID uuid.UUID) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, employeeID)
	var i Employee
	err := row.Scan(
		&i.EmployeeID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.HireDate,
		&i.Position,
		&i.Salary,
		&i.UserID,
	)
	return i, err
}

const getUserEmployeeInfoByID = `-- name: GetUserEmployeeInfoByID :many
SELECT
    users.id AS user_id,
    users.first_name,
    users.last_name,
    users.email,
    employees.employee_id,
    employees.phone_number,
    employees.hire_date,
    employees.position,
    employees.salary
FROM
    users
INNER JOIN
    employees ON users.id = employees.user_id
WHERE
    users.id = $1
`

type GetUserEmployeeInfoByIDRow struct {
	UserID      uuid.UUID      `json:"user_id"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	Email       string         `json:"email"`
	EmployeeID  uuid.UUID      `json:"employee_id"`
	PhoneNumber sql.NullString `json:"phone_number"`
	HireDate    sql.NullTime   `json:"hire_date"`
	Position    sql.NullString `json:"position"`
	Salary      sql.NullString `json:"salary"`
}

func (q *Queries) GetUserEmployeeInfoByID(ctx context.Context, id uuid.UUID) ([]GetUserEmployeeInfoByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserEmployeeInfoByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserEmployeeInfoByIDRow{}
	for rows.Next() {
		var i GetUserEmployeeInfoByIDRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.EmployeeID,
			&i.PhoneNumber,
			&i.HireDate,
			&i.Position,
			&i.Salary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEmployees = `-- name: ListEmployees :many
SELECT employee_id, first_name, last_name, email, phone_number, hire_date, position, salary, user_id FROM employees
ORDER BY employee_id
LIMIT $1
OFFSET $2
`

type ListEmployeesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmployees(ctx context.Context, arg ListEmployeesParams) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployees, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.EmployeeID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneNumber,
			&i.HireDate,
			&i.Position,
			&i.Salary,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE employees
SET first_name = $2,
    last_name = $3,
    email = $4,
    phone_number = $5,
    hire_date = $6,
    position = $7,
    salary = $8
WHERE employee_id = $1
RETURNING employee_id, first_name, last_name, email, phone_number, hire_date, position, salary, user_id
`

type UpdateEmployeeParams struct {
	EmployeeID  uuid.UUID      `json:"employee_id"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	Email       string         `json:"email"`
	PhoneNumber sql.NullString `json:"phone_number"`
	HireDate    sql.NullTime   `json:"hire_date"`
	Position    sql.NullString `json:"position"`
	Salary      sql.NullString `json:"salary"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, updateEmployee,
		arg.EmployeeID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.HireDate,
		arg.Position,
		arg.Salary,
	)
	var i Employee
	err := row.Scan(
		&i.EmployeeID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.HireDate,
		&i.Position,
		&i.Salary,
		&i.UserID,
	)
	return i, err
}
