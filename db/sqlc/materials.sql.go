// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: materials.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMaterial = `-- name: CreateMaterial :one
INSERT INTO materials (
  material_name, quantity, unit, cost_per_unit, project_id
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING material_id, material_name, quantity, unit, cost_per_unit, project_id, status
`

type CreateMaterialParams struct {
	MaterialName string         `json:"material_name"`
	Quantity     sql.NullInt32  `json:"quantity"`
	Unit         sql.NullInt32  `json:"unit"`
	CostPerUnit  sql.NullString `json:"cost_per_unit"`
	ProjectID    uuid.NullUUID  `json:"project_id"`
}

func (q *Queries) CreateMaterial(ctx context.Context, arg CreateMaterialParams) (Material, error) {
	row := q.db.QueryRowContext(ctx, createMaterial,
		arg.MaterialName,
		arg.Quantity,
		arg.Unit,
		arg.CostPerUnit,
		arg.ProjectID,
	)
	var i Material
	err := row.Scan(
		&i.MaterialID,
		&i.MaterialName,
		&i.Quantity,
		&i.Unit,
		&i.CostPerUnit,
		&i.ProjectID,
		&i.Status,
	)
	return i, err
}

const deleteMaterial = `-- name: DeleteMaterial :exec
DELETE FROM materials
WHERE material_id = $1
`

func (q *Queries) DeleteMaterial(ctx context.Context, materialID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMaterial, materialID)
	return err
}

const getMaterial = `-- name: GetMaterial :one
SELECT material_id, material_name, quantity, unit, cost_per_unit, project_id, status FROM materials
WHERE material_id = $1
LIMIT 1
`

func (q *Queries) GetMaterial(ctx context.Context, materialID uuid.UUID) (Material, error) {
	row := q.db.QueryRowContext(ctx, getMaterial, materialID)
	var i Material
	err := row.Scan(
		&i.MaterialID,
		&i.MaterialName,
		&i.Quantity,
		&i.Unit,
		&i.CostPerUnit,
		&i.ProjectID,
		&i.Status,
	)
	return i, err
}

const listMaterials = `-- name: ListMaterials :many
SELECT material_id, material_name, quantity, unit, cost_per_unit, project_id, status FROM materials
ORDER BY material_id
LIMIT $1
OFFSET $2
`

type ListMaterialsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMaterials(ctx context.Context, arg ListMaterialsParams) ([]Material, error) {
	rows, err := q.db.QueryContext(ctx, listMaterials, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Material{}
	for rows.Next() {
		var i Material
		if err := rows.Scan(
			&i.MaterialID,
			&i.MaterialName,
			&i.Quantity,
			&i.Unit,
			&i.CostPerUnit,
			&i.ProjectID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaterial = `-- name: UpdateMaterial :one
UPDATE materials
SET material_name = $2,
    quantity = $3,
    unit = $4,
    cost_per_unit = $5,
    project_id = $6
WHERE material_id = $1
RETURNING material_id, material_name, quantity, unit, cost_per_unit, project_id, status
`

type UpdateMaterialParams struct {
	MaterialID   uuid.UUID      `json:"material_id"`
	MaterialName string         `json:"material_name"`
	Quantity     sql.NullInt32  `json:"quantity"`
	Unit         sql.NullInt32  `json:"unit"`
	CostPerUnit  sql.NullString `json:"cost_per_unit"`
	ProjectID    uuid.NullUUID  `json:"project_id"`
}

func (q *Queries) UpdateMaterial(ctx context.Context, arg UpdateMaterialParams) (Material, error) {
	row := q.db.QueryRowContext(ctx, updateMaterial,
		arg.MaterialID,
		arg.MaterialName,
		arg.Quantity,
		arg.Unit,
		arg.CostPerUnit,
		arg.ProjectID,
	)
	var i Material
	err := row.Scan(
		&i.MaterialID,
		&i.MaterialName,
		&i.Quantity,
		&i.Unit,
		&i.CostPerUnit,
		&i.ProjectID,
		&i.Status,
	)
	return i, err
}
