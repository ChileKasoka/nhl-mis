// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tasks.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
  task_name, description, start_date, end_date, project_id, employee_id, status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING task_id, task_name, description, start_date, end_date, project_id, employee_id, status
`

type CreateTaskParams struct {
	TaskName    string         `json:"task_name"`
	Description sql.NullString `json:"description"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	ProjectID   uuid.NullUUID  `json:"project_id"`
	EmployeeID  uuid.NullUUID  `json:"employee_id"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.TaskName,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.ProjectID,
		arg.EmployeeID,
		arg.Status,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.TaskName,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.ProjectID,
		&i.EmployeeID,
		&i.Status,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE task_id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, taskID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, taskID)
	return err
}

const getTask = `-- name: GetTask :one
SELECT task_id, task_name, description, start_date, end_date, project_id, employee_id, status FROM tasks
WHERE task_id = $1
LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, taskID uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, taskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.TaskName,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.ProjectID,
		&i.EmployeeID,
		&i.Status,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT task_id, task_name, description, start_date, end_date, project_id, employee_id, status FROM tasks
ORDER BY task_id
LIMIT $1
OFFSET $2
`

type ListTasksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.TaskName,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.ProjectID,
			&i.EmployeeID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET task_name = $2,
    description = $3,
    start_date = $4,
    end_date = $5,
    project_id = $6,
    employee_id = $7,
    status = $8
WHERE task_id = $1
RETURNING task_id, task_name, description, start_date, end_date, project_id, employee_id, status
`

type UpdateTaskParams struct {
	TaskID      uuid.UUID      `json:"task_id"`
	TaskName    string         `json:"task_name"`
	Description sql.NullString `json:"description"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	ProjectID   uuid.NullUUID  `json:"project_id"`
	EmployeeID  uuid.NullUUID  `json:"employee_id"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.TaskID,
		arg.TaskName,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.ProjectID,
		arg.EmployeeID,
		arg.Status,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.TaskName,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.ProjectID,
		&i.EmployeeID,
		&i.Status,
	)
	return i, err
}
